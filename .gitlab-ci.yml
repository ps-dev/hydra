include:
  - project: 'pluralsight/experience/gitlab-helpers'
    file: '/salt-deploy/helper.yml'
  - project: 'pluralsight/experience/gitlab-helpers'
    file: '/helm-deploy/helper.yml'
  - project: 'pluralsight/Technology/adapt/data-platform/gitlab-fragments/helm_deploy'
    ref: data-ops
    file: 'helm-destroy.yml'
  - project: 'pluralsight/Technology/adapt/data-platform/gitlab-fragments/snyk'
    ref: main
    file: 'snyk-check.yml'


image: harbor.vnerd.com/library/hydra-build-tools:latest

variables:
  BUILD_FLAG: 
    description: "Do you want to Build and Deploy ?"
    value: "true"
    options:
      - "true"
      - "false"
  MANUAL_BUILD_VERSION: 
    description: "Specify the Build Version, If you are not sure about the BUILD Version. Please Keep Build Flag to False"
    value: ""
  ARTIFACT_NAME: hydra-publish
  IMAGE_NAME: hydra
  DOCKER_REGISTRY_URL: harbor.vnerd.com/library
  DOCKER_REGISTRY_IMAGE: ${DOCKER_REGISTRY_URL}/${IMAGE_NAME}
  ARTIFACTORY_REPOSITORY_URL: https://repository.vnerd.com/artifactory
  ARTIFACTORY_REPOSITORY: bounded-context
  ARTIFACTORY_ID: hydra/publish
  ARTIFACTORY_PATH: ${ARTIFACTORY_ID}/${ARTIFACTORY_ARTIFACT_VERSION}
  ARTIFACTORY_ARTIFACT_URL: ${ARTIFACTORY_REPOSITORY_URL}/${ARTIFACTORY_REPOSITORY}/${ARTIFACTORY_PATH}
  SERVICE_NAME: "dev-hydra"
  SLACK_ICON_EMOJI: ":gitlab:"
  SLACK_CHANNEL: '#data-platform-alerts'
  SLACK_USERNAME: 'GITLAB'
  SNYK_SLACK_CHANNEL: '#dataops-snyk-vulnerability-alerts'
  SNYK_SLACK_ICON_EMOJI: ":snyk:"
  SNYK_ORG_ID: "d8094638-7a37-413f-b1b4-ad840fb9e239"
  SNYK_PROJECT_ID: "d243a0e6-4ced-4efe-83fc-169d03b40cc7"
  SNYK_PROJECT_URL: "https://app.snyk.io/org/ps-data-services"
  run_clean_up: "False"
  HELM_VERSION: 3.13.2

stages:
  - build
  - code-analysis
  - package
  - publish
  - Dev
  - Staging
  - Production
  - cleanup


workflow: 
  rules:
    - if: $BUILD_FLAG == "false"
      variables:
        PUBLISH_BUILD_VERSION: ${MANUAL_BUILD_VERSION}
        ARTIFACTORY_ARTIFACT_VERSION: ${ARTIFACT_NAME}-${MANUAL_BUILD_VERSION}.tgz
    - if: $BUILD_FLAG == "true"
      variables:
        PUBLISH_BUILD_VERSION: 1.0.${CI_PIPELINE_IID}
        ARTIFACTORY_ARTIFACT_VERSION: ${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz


snyk-code-check:
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $BUILD_FLAG == "true"
      when: always 
    - when: never

snyk-notify:
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $BUILD_FLAG == "true"
      when: always 
    - when: never

build:
  stage: build
  cache: []
  retry: 2
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $BUILD_FLAG == "true"
      when: always 
    - when: never
  script:
    - sbt clean compile test

package:
  stage: package
  cache: []
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $BUILD_FLAG == "true" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: on_success 
    - when: never
  script:
    - sbt universal:packageBin
    - ls ingest/target/universal/*.zip | xargs -I {} unzip {} -d ps-publish
    - mv ps-publish/hydra-ingest*/* ps-publish
    - rm -rf ps-publish/hydra-ingest*
    - cd ps-publish/bin
    - ls -la
    - curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/4.4.0/newrelic-agent-4.4.0.jar
    - curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/4.4.0/newrelic.yml
    - cd ../../
    - echo $PUBLISH_BUILD_VERSION > VERSION
    - tar czf ${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz --exclude=*.tmp --exclude=*.tgz --exclude=*.tgz.md5 VERSION ps-publish/
    - echo "##teamcity[publishArtifacts '${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz']"
    - md5sum ${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz > ${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz.md5
    - echo "${ARTIFACTORY_ARTIFACT_URL}"
    - |
      curl \
      -H "Authorization: Bearer ${NPM_TOKEN}" \
      -X PUT ${ARTIFACTORY_ARTIFACT_URL} \
      -T ${ARTIFACTORY_ARTIFACT_VERSION}
  artifacts:
    paths:
      - ${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz
      - ${ARTIFACT_NAME}-${PUBLISH_BUILD_VERSION}.tgz.md5
      - ps-publish/

publish:
  stage: publish
  image: harbor.vnerd.com/proxy/library/docker:cli
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule"  && $BUILD_FLAG == "true" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: on_success 
    - when: never
  tags:
    - ps
    - docker
  needs:
    - package
  before_script:
    - echo -n "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USERNAME" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - docker build --build-arg BUILD_NUMBER=${PUBLISH_BUILD_VERSION} -t ${IMAGE_NAME} -f Dockerfile.new . 
    - docker tag ${IMAGE_NAME} ${DOCKER_REGISTRY_IMAGE}:${PUBLISH_BUILD_VERSION}
    - docker push ${DOCKER_REGISTRY_IMAGE}:${PUBLISH_BUILD_VERSION}
    - docker tag ${IMAGE_NAME} ${DOCKER_REGISTRY_IMAGE}:latest
    - docker push ${DOCKER_REGISTRY_IMAGE}:latest
  variables:
    DOCKER_HOST: tcp://localhost:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_TLS_VERIFY: 1

.notify-all:
  image: harbor.vnerd.com/library/ps-helm:latest
  tags:
    - ps
    - docker 
  script:
    - ps-notify slack "$SLACK_MESSAGE" "$SLACK_CHANNEL"  --slack-username $SLACK_USERNAME --slack-icon-emoji $SLACK_ICON_EMOJI
  variables:
    NODE_ENV: $ENV

EKS:dev_deploy:
    stage: Dev
    extends: .helmDeploy
    rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: manual 
    - if: $BUILD_FLAG == "true"  &&  $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs: ["publish"] 
      when: manual
    - when: never
    environment:
      name: dev
    before_script:
      - echo "$MANUAL_BUILD_VERSION"
      - echo "$ARTIFACTORY_ARTIFACT_VERSION"
      - sed -i -e "s/%IMAGE_TAG%/${PUBLISH_BUILD_VERSION}/g" $HELM_VALUES_FILE
      - sed -i -e "s/%BRANCH_NAME%/${CI_COMMIT_BRANCH}/g" $HELM_VALUES_FILE
      - sed -i -e "s/%DEPLOYED_BY%/${GITLAB_USER_LOGIN}/g" $HELM_VALUES_FILE
      - echo ${PUBLISH_BUILD_VERSION}
      - kubectl config set-cluster app-${CI_ENVIRONMENT_NAME%/*} --server=${HELM_K8S_CLUSTER_URL} --embed-certs --certificate-authority="$HELM_K8S_CLUSTER_CACERT"
      - kubectl config set-credentials deploy --token=`echo ${HELM_DEPLOY_TOKEN} | base64 -d`
      - kubectl config set-context deploy --cluster=app-${CI_ENVIRONMENT_NAME%/*} --namespace=${HELM_TARGET_NAMESPACE} --user=deploy
      - kubectl config use-context deploy
    variables:
      HELM_TIMEOUT: 1800s
      HELM_CHART_NAME: ps-service
      HELM_DEPLOY_TOKEN: ${HELM_DEV_DEPLOY_TOKEN}
      K8S_CLUSTER_NAME: app-eks.eplur-staging.us-west-2
      HELM_K8S_CLUSTER_URL: https://6C29C0073BB19BEF220B9437E6962AF2.gr7.us-west-2.eks.amazonaws.com
      BOUNDED_CONTEXT: adapt-dvs-dev
      HELM_TARGET_NAMESPACE: ${BOUNDED_CONTEXT}
      APPLICATION_ROLE: "dev-hydra-${CI_COMMIT_BRANCH}"
      HELM_VALUES_FILE: helm/eks-dev-values.yml
      SERVICE_NAME: "${ENV}-hydra-${CI_COMMIT_BRANCH}"

slack:dev:
  stage: Dev
  extends: .notify-all 
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
      variables:
        SLACK_MESSAGE: |
          *[[SERVICE_NAME]]* deployed to *[[ENV]] Cluster* 
          Branch: ${CI_COMMIT_BRANCH}
          Version: ${PUBLISH_BUILD_VERSION}
          URL: https://hydra-publish-dev-${CI_COMMIT_BRANCH}.eplur-staging.vnerd.com/
          [[PIPELINE_LINK]]
      needs: ['EKS:dev_deploy']
      when: on_success 
    - when: never
  before_script:
    - echo "Sending notification to slack"
    - echo "$SLACK_MESSAGE"
  variables:
    ENV: "DEV"
    SERVICE_NAME: "dev-hydra"
    
deploy_staging: 
  stage: Staging
  extends: .saltDeploy
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: on_success 
    - when: never
  before_script:
    - | 
      sed -i -e "s/%latest%/1.0.${CI_PIPELINE_IID}/g" $SALT_PILLAR
      cat $SALT_PILLAR  
  variables:
    CI_JOB_STAGE: stage
    SALT_TARGET: roles:hydra-publish-msk
    SALT_PASSWORD: ${LDAP_PASS}
    SALT_ARGUMENTS: systemd-app
    SALT_USERNAME: tcity-data-platform
    SALT_KWARGS: 'failhard=true'
    SALT_PILLAR: $CI_PROJECT_DIR/pillar_overrides.yaml
    SALT_URL: https://saltmaster-stage.vnerd.com:8000

slack:staging:
  stage: Staging
  extends: .notify-all
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs: ['deploy_staging']
      when: on_success 
    - when: never
  before_script:
    - echo "Sending notification to slack"
  variables:
    ENV: "Staging Cluster"
    SERVICE_NAME: "staging-hydra-publish"
    SLACK_MESSAGE: |
      *[[SERVICE_NAME]]* deployed to *[[ENV]]* Cluster 
      Branch: ${CI_COMMIT_BRANCH}
      Version: ${PUBLISH_BUILD_VERSION}
      [[PIPELINE_LINK]]

deploy_production:
  stage: Production
  extends: .saltDeploy
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: on_success 
    - when: never
  before_script:
    - | 
      sed -i -e "s/%latest%/1.0.${CI_PIPELINE_IID}/g" $SALT_PILLAR
      cat $SALT_PILLAR
  variables:
    CI_JOB_STAGE: stage
    SALT_TARGET: roles:hydra-publish-msk
    SALT_PASSWORD: ${LDAP_PASS}
    SALT_ARGUMENTS: systemd-app
    SALT_USERNAME: tcity-data-platform
    SALT_KWARGS: 'failhard=true'
    SALT_PILLAR: $CI_PROJECT_DIR/pillar_overrides.yaml
    SALT_URL: https://saltmaster-production.vnerd.com:8000

slack:production:
  stage: Production
  extends: .notify-all
  rules: 
    - if: $run_clean_up == "False" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs: ['deploy_production']
      when: on_success 
    - when: never
  before_script:
    - echo "Sending notification to slack"
  variables:
    ENV: "Production"
    SERVICE_NAME: "production-hydra"
    SLACK_MESSAGE: |
      *[[SERVICE_NAME]]* deployed to *[[ENV]]* Cluster 
      Branch: ${CI_COMMIT_BRANCH}
      Version: ${PUBLISH_BUILD_VERSION}
      [[PIPELINE_LINK]]

cleanup_dev_env:
  image: harbor.vnerd.com/proxy/devth/helm:v${HELM_VERSION}
  stage: cleanup
  before_script:
    - kubectl config set-cluster app-${CI_ENVIRONMENT_NAME%/*} --server=${HELM_K8S_CLUSTER_URL} --embed-certs --certificate-authority="$HELM_K8S_CLUSTER_CACERT"
    - kubectl config set-credentials deploy --token=`echo ${HELM_DEPLOY_TOKEN} | base64 -d`
    - kubectl config set-context deploy --cluster=app-${CI_ENVIRONMENT_NAME%/*} --namespace=${HELM_TARGET_NAMESPACE} --user=deploy
    - kubectl config use-context deploy
  script:
    - |
      #!/bin/bash
      format='%Y-%m-%d %H:%M:%S'
      kubectl get deployments  -n adapt-dvs-dev --selector=branch -o json | jq -c '.items[]' | sed 's/\\"/\\'\''/g' | while read i; do
        helm_release_name=$(echo "$i" | jq -r ".metadata.labels.release")
        created_at=$(echo "$i" | jq -r ".metadata.creationTimestamp" | sed 's/T/ /g' | sed 's/Z//g')
        echo "================= Helm Details ================="
        echo "Helm Release Name: $helm_release_name"
        echo "Created At: $created_at"
        echo "================================================"
        resource_created_time=$(date -d"$created_at" '+%s')
        current_time=$(date -u +"$format")
        formatted_current_time=$(date -d"$current_time" '+%s')
        echo "Current Time: $current_time"
        echo "Resource Created Time: $created_at"
        total_diff_seconds_in_hours=$(( $formatted_current_time - $resource_created_time ))
        total_diff_seconds_in_hours=$(( $total_diff_seconds_in_hours / 3600 ))
        if [ $total_diff_seconds_in_hours -ge 5 ]; then
          echo "Release ($helm_release_name) will be deleted as it is running for $total_diff_seconds_in_hours hours"
          helm uninstall ${helm_release_name}
          echo "Done Unnistalling $helm_release_name"
        else
          echo "Ignoreing,As $helm_release_name has not completed 5 hours.."
        fi
      done
  variables:
    HELM_CHART_NAME: ps-service
    HELM_DEPLOY_TOKEN: ${HELM_DEV_DEPLOY_TOKEN}
    K8S_CLUSTER_NAME: app-eks.eplur-staging.us-west-2
    HELM_K8S_CLUSTER_URL: https://6C29C0073BB19BEF220B9437E6962AF2.gr7.us-west-2.eks.amazonaws.com
    BOUNDED_CONTEXT: adapt-dvs-dev
    HELM_TARGET_NAMESPACE: ${BOUNDED_CONTEXT}
    APPLICATION_ROLE: "dev-hydra-${CI_COMMIT_BRANCH}"
    HELM_VALUES_FILE: helm/eks-dev-values.yml
    SERVICE_NAME: "${ENV}-hydra-${CI_COMMIT_BRANCH}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"  && $run_clean_up == "True"
      when: always
    - when: never
