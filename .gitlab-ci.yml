# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Scala.gitlab-ci.yml

# Official OpenJDK Java image. Look for the different tagged releases at
# https://hub.docker.com/_/openjdk/ . A Java image is not required
# but an image with a JVM speeds up the build a bit.
image: openjdk:8

before_script:
  # Enable the usage of sources over https
  - apt-get update -yqq
  - apt-get install apt-transport-https -yqq
  # Add keyserver for SBT
  - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list
  - mkdir -p /root/.gnupg
  - gpg --recv-keys --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --keyserver hkp://keyserver.ubuntu.com:80 2EE0EA64E40A89B84B2DF73499E82A75642AC823
  - chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
  # Install SBT
  - apt-get update -yqq
  - apt-get install sbt -yqq
  # Log the sbt version
  - sbt sbtVersion
  # Install docker 
  - apt-get install docker -yqq


build:
  stage: build
  script:
    # Execute your project's tests
    # Clean compile Test
    - sbt clean compile test
    #Package
    - sbt universal:packageBin
    # Zip Artifact with Dependency Libs
    - ls
    - unzip ingest/target/universal/*.zip -d ps-publish
    - ls
    - mv ps-publish/hydra-ingest*/* ps-publish
    - rm -rf ps-publish/hydra-ingest*
    - cd ps-publish/bin
    - ls -la
    - curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/4.4.0/newrelic-agent-4.4.0.jar
    - curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/4.4.0/newrelic.yml
    - cd ../../
    - echo %build.number% > VERSION
    - tar czf %env.ARTIFACT_NAME%-%build.number%.tgz --exclude=*.tmp --exclude=*.tgz --exclude=*.tgz.md5 VERSION ps-publish/
    - echo "##teamcity[publishArtifacts '%env.ARTIFACT_NAME%-%build.number%.tgz']"
    # Md5sum and Publish Md5Sum Artifact
    - md5sum %env.ARTIFACT_NAME%-%build.number%.tgz > %env.ARTIFACT_NAME%-%build.number%.tgz.md5
    - echo "##teamcity[publishArtifacts '%env.ARTIFACT_NAME%-%build.number%.tgz.md5']"
    # Docker Build and Docker Push
    - pwd
    - ls -lh
    - docker build -t %image.name% -f Dockerfile.new .
    - docker tag %image.name% harbor.vnerd.com/library/%image.name%:%build.number%
    - docker push harbor.vnerd.com/library/%image.name%:%build.number%
    - docker tag %image.name% harbor.vnerd.com/library/%image.name%:latest
    - docker push harbor.vnerd.com/library/%image.name%:latest
    # Update VERSION File
    - CURYEAR=$(date +%Y)
    - CURMONTH=$(date +%-m)
    - echo -n "${CURYEAR}.${CURMONTH}.%env.BUILD_NUMBER%.%teamcity.build.id%" > VERSION